/*
 *  Copyright (c) 2011-2012 Ahmad Amireh <ahmad@amireh.net>
 *
 *  Permission is hereby granted, free of charge, to any person obtaining a
 *  copy of this software and associated documentation files (the "Software"),
 *  to deal in the Software without restriction, including without limitation
 *  the rights to use, copy, modify, merge, publish, distribute, sublicense,
 *  and/or sell copies of the Software, and to permit persons to whom the
 *  Software is furnished to do so, subject to the following conditions:
 *
 *  The above copyright notice and this permission notice shall be included in
 *  all copies or substantial portions of the Software.
 *
 *  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 *  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 *  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL
 *  THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 *  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 *  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 *  SOFTWARE.
 *
 */

#ifndef H_HAX_IDENTIFIABLE_H
#define H_HAX_IDENTIFIABLE_H

#include "Hax/Hax.hpp"
#include "Hax/Event.hpp"

#include <string>

namespace Hax
{
	/**
   * @class Identifiable
	 * @brief
   * Identifiable objects hold a unique UID field throughout the game to
   * represent its identity and a model identifier (a name) to represent its type.
   *
   * For example, a Spell object could have a UID of 6, and a name "Fireball".
	 */
	class Identifiable {
	public:

		Identifiable();
		Identifiable& operator=(const Identifiable& rhs);
		Identifiable(const Identifiable& src);
		virtual ~Identifiable();

		/*!
     * @brief
     * The UID is a global identifier for _this_ object and you can be assured
     * that no other object has the same UID throughout the game's instance.
     *
     * This UID is generated by the server.
     *
     * @warning
     * Attempting to re-assign the UID after it's been changed from Unassigned
     * will throw an exception of type "integrity_violation".
     */
		void _setUID(int);
		int getUID() const;

		/*!
     * @brief
     * The name is used for determining the sub-type of an object, for example
     * a Spell or a Unit's name. Names are not unique in the sense that many
     * objects could share the same name but with a different UID.
     *
     * The name is assigned to the object when it's created by its respective
     * factory.
     *
     * @warning
     * Attempting to re-assign an object's name after it's been changed from Unnamed
     * will throw an exception of type "integrity_violation".
     */
    void _setName(std::string const&);
    std::string const& getName() const;

    /**
     * @brief
     * Two Identifiables are equal only when their UIDs match.
     **/
    bool operator==(const Identifiable& rhs);

    virtual void serialize(Event& inEvt);
    virtual void deserialize(const Event& inEvt);

		protected:

    int mUID;
    std::string mName;

		void copyFrom(const Identifiable& src);
	}; // end of Identifiable class
} // end of Hax namespace
#endif
